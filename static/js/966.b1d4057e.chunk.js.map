{"version":3,"file":"static/js/966.b1d4057e.chunk.js","mappings":"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","sources":["components/checkbox/CheckBox.js","pages/SignUpPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useController } from \"react-hook-form\";\r\n\r\nimport classNames from \"~/utils/classNames\";\r\nimport { IconCheck } from \"@/icon\";\r\n\r\nconst Checkbox = ({\r\n  control,\r\n  checked = false,\r\n  onClick,\r\n  name,\r\n  children,\r\n  id,\r\n  ...rest\r\n}) => {\r\n  const { field } = useController({\r\n    control,\r\n    name,\r\n    defaultValue: false,\r\n  });\r\n  return (\r\n    <div className=\"flex items-start gap-x-5\">\r\n      <div\r\n        className={classNames(\r\n          \"inline-flex h-5 w-5 cursor-pointer items-center justify-center rounded border p-1 text-white\",\r\n          checked\r\n            ? \"border-primary-blue bg-primary-blue\"\r\n            : \"border-c4 dark:border-c3\"\r\n        )}\r\n        onClick={onClick}\r\n      >\r\n        <input\r\n          type=\"checkbox\"\r\n          className=\"hidden\"\r\n          checked={checked}\r\n          id={id}\r\n          {...field}\r\n          {...rest}\r\n        />\r\n        <IconCheck checked={checked} />\r\n      </div>\r\n      {children && (\r\n        <label htmlFor={id} className=\"cursor-pointer\">\r\n          {children}\r\n        </label>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Checkbox;\r\n","import { yupResolver } from \"@hookform/resolvers/yup\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { Link, useNavigate } from \"react-router-dom\";\r\nimport { toast } from \"react-toastify\";\r\nimport * as Yup from \"yup\";\r\n\r\nimport useToggleValue from \"~/hooks/useToggleValue\";\r\nimport { LayoutAuth } from \"~/layouts\";\r\n\r\nimport ButtonGoogle from \"@/button/ButtonGoogle\";\r\nimport ButtonSubmitAuth from \"@/button/ButtonSubmitAuth\";\r\nimport Checkbox from \"@/checkbox/CheckBox\";\r\nimport FormGroup from \"@/common/FormGroup\";\r\nimport Label from \"@/label/Label\";\r\nimport TextAuth from \"@/text/TextAuth\";\r\nimport TogglePassword from \"@/toggle/TogglePassword\";\r\nimport { useEffect } from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Input from \"~/components/input/Input\";\r\nimport { authRegister } from \"~/sagas/auth/auth-slice\";\r\n\r\nconst schame = Yup.object({\r\n  fullName: Yup.string().required(\"Please enter your full name\"),\r\n  // email: Yup.string().email().required(\"Email is required\"),\r\n  email: Yup.string()\r\n    .required(\"Please enter your emaill address\")\r\n    .matches(\r\n      // eslint-disable-next-line no-control-regex\r\n      /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])/,\r\n      { message: \"Please enter valid email address\" }\r\n    ),\r\n  password: Yup.string()\r\n    .required(\"Please enter your password\")\r\n    .min(8, \"Password must be 8 characters\"),\r\n});\r\nconst SignUpPage = () => {\r\n  const navigate = useNavigate();\r\n  const {\r\n    handleSubmit,\r\n    control,\r\n    formState: { errors, isSubmitting },\r\n  } = useForm({\r\n    resolver: yupResolver(schame),\r\n    mode: \"onSubmit\",\r\n  });\r\n  console.log(isSubmitting);\r\n  const dispath = useDispatch();\r\n  const handleSignIn = ({ term, ...values }) => {\r\n    dispath(authRegister(values));\r\n    // if (isSubmitting) {\r\n    //   return new Promise((resolve, reject) => {\r\n    //     setTimeout(() => {\r\n    //       resolve();\r\n    //       navigate(\"/sign-in\");\r\n    //     }, 1000);\r\n    //   });\r\n    // }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const arrErrors = Object.values(errors);\r\n    if (arrErrors.length > 0) {\r\n      toast.error(arrErrors[0]?.message, {\r\n        autoClose: 1000,\r\n        pauseOnHover: false,\r\n        draggable: true,\r\n        delay: 50,\r\n      });\r\n    }\r\n  }, [errors]);\r\n\r\n  const { value: showPassword, handleToggleValue: handleTogglePassword } =\r\n    useToggleValue();\r\n  const { value: acceptTerm, handleToggleValue: handleToggleTerm } =\r\n    useToggleValue();\r\n  return (\r\n    <LayoutAuth heading=\"Sign up\" title=\"Sign up\">\r\n      <TextAuth\r\n        pagraph=\"Already have an account?\"\r\n        span=\"Sign in\"\r\n        to=\"/sign-in\"\r\n      />\r\n      <ButtonGoogle>Sign up with google</ButtonGoogle>\r\n      <p className=\"text-grayScale-c3 dark:text-grayScale-c4 mb-5 text-center text-xs lg:text-sm\">\r\n        Or sign up with email\r\n      </p>\r\n      <form onSubmit={handleSubmit(handleSignIn)}>\r\n        <FormGroup>\r\n          <Label htmlFor=\"fullname\">Full Name*</Label>\r\n          <Input\r\n            variant={\"outlined\"}\r\n            control={control}\r\n            id=\"fullname\"\r\n            name=\"fullName\"\r\n            type=\"text\"\r\n            placeholder=\"Jhon Doe\"\r\n            error={errors.fullName?.message}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label htmlFor=\"email\">Email*</Label>\r\n          <Input\r\n            variant={\"outlined\"}\r\n            control={control}\r\n            id=\"email\"\r\n            name=\"email\"\r\n            type=\"email\"\r\n            placeholder=\"example@gmail.com\"\r\n            error={errors.email?.message}\r\n          />\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <Label htmlFor=\"password\">Password*</Label>\r\n          <Input\r\n            variant={\"outlined\"}\r\n            control={control}\r\n            id=\"password\"\r\n            name=\"password\"\r\n            type={`${showPassword ? \"text\" : \"password\"}`}\r\n            placeholder=\"Create a password\"\r\n            error={errors.password?.message}\r\n          >\r\n            <TogglePassword\r\n              open={showPassword}\r\n              onClick={handleTogglePassword}\r\n            />\r\n          </Input>\r\n        </FormGroup>\r\n        <div className=\"mb-5 flex items-start gap-x-5\">\r\n          <Checkbox\r\n            id=\"term\"\r\n            name=\"term\"\r\n            checked={acceptTerm}\r\n            onClick={handleToggleTerm}\r\n            control={control}\r\n          >\r\n            <p className=\"text-text2 dark:text-text3 flex-1 select-none text-xs leading-relaxed transition-all dark:text-white lg:text-sm\">\r\n              I agree to the\r\n              <Link to=\"/\" className=\"font-medium text-primary-blue underline\">\r\n                {\" \"}\r\n                Terms of Use\r\n              </Link>{\" \"}\r\n              and have read and understand the\r\n              <Link to=\"/\" className=\"font-medium text-primary-blue underline\">\r\n                {\" \"}\r\n                Privacy policy.\r\n              </Link>\r\n            </p>\r\n          </Checkbox>\r\n        </div>\r\n        <ButtonSubmitAuth\r\n          disabled={isSubmitting || !acceptTerm}\r\n          isLoading={isSubmitting}\r\n        >\r\n          Sign up\r\n        </ButtonSubmitAuth>\r\n      </form>\r\n    </LayoutAuth>\r\n  );\r\n};\r\n\r\nexport default SignUpPage;\r\n"],"names":["control","checked","onClick","name","children","id","rest","field","useController","defaultValue","className","classNames","type","htmlFor","schame","Yup","fullName","required","email","matches","message","password","min","useNavigate","useForm","resolver","yupResolver","mode","handleSubmit","formState","errors","isSubmitting","console","log","dispath","useDispatch","useEffect","arrErrors","Object","values","length","toast","autoClose","pauseOnHover","draggable","delay","useToggleValue","showPassword","value","handleTogglePassword","handleToggleValue","acceptTerm","handleToggleTerm","heading","title","TextAuth","pagraph","span","to","ButtonGoogle","onSubmit","term","authRegister","FormGroup","Label","Input","variant","placeholder","error","TogglePassword","open","ButtonSubmitAuth","disabled","isLoading"],"sourceRoot":""}